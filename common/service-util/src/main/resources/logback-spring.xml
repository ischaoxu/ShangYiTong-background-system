<!--
scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">


    <!--每个logger都关联到logger上下文，默认上下文名称为“default”。
    可以使用contextName标签设置成其他名字，用于区分不同应用程序的记录-->
    <contextName>syt</contextName>

    <!--
    用来定义变量值的标签，property标签有两个属性，name和value；
    其中name的值是变量的名称，value的值是变量定义的值。
    通过property定义的值会被插入到logger上下文中。
    定义变量后，可以使“${name}”来使用变量。
    -->
    <property name="charset" value="UTF-8"></property>
    <!--控制台彩色日志日志格式-->
    <!-- magenta:洋红 -->
    <!-- boldMagenta:粗红-->
    <!-- cyan:青色 -->
    <!-- white:白色 -->
    <!-- magenta:洋红 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%boldMagenta(%date{yyyy-MM-dd HH:mm:ss}) %highlight(%-5level) %thread %magenta(%file:%line) %green(%logger) - %msg%n"/>

    <!-- 默认的控制台日志输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>${charset}</charset>
        </encoder>
    </appender>

    <!--
    根logger，且只有一个level属性，定义日志输出的默认级别
    如果微服务中配置了logging:level:xxx，那么微服务中设置的级别优先
    如果微服务中没有配置日志级别，那么日志按照此处配置的级别输出
    -->
    <root level="info">
        <!--ref：引用appender的name的值-->
        <appender-ref ref="STDOUT"/>
    </root>
</configuration>